import { Configuration, OpenAIApi } from "openai";

/**
 * Calls the OpenAI API using a provided prompt value.
 *
 * This function sets up a configuration with the API key, initializes
 * the OpenAI API, and sends a chat completion request with the provided
 * prompt. It returns the text generated by the API.
 *
 * @param {string} promptValue The prompt value to be passed to the OpenAI API.
 * @returns {Promise<string>} A promise that resolves to the text generated by the API.
 */

const openAIChatWrapper = async (promptValue) => {
  const configuration = new Configuration({
    apiKey: process.env.NEXT_PUBLIC_OPENAI_API_KEY,
  });
  const openai = new OpenAIApi(configuration);

  const completion = await openai.createChatCompletion({
    model: process.env.NEXT_PUBLIC_OPENAI_API_MODEL,
    messages: [
      { role: "assistant", content: "You are a helpful assistant." },
      { role: "user", content: promptValue },
    ],
  });

  return completion.data.choices[0].message.content;
};

export default openAIChatWrapper;

/**
 * Retrieves styled text from the OpenAI API based on a specified context.
 *
 * This function generates a prompt based on the provided context ('summarize',
 * 'vocab', or 'improve') and sends it to the OpenAI API using openAIChatWrapper.
 * It then returns the styled text as per the specified context.
 *
 * @param {string} content The text to be styled.
 * @param {string} context The context for styling ('summarize', 'vocab', 'improve').
 * @returns {Promise<string>} A promise that resolves to the styled text.
 */
export const getStyledText = async (content, context) => {
  let promptValue = `Below content is part of a writing article.`;
  switch (context) {
    case "summarize":
      promptValue += `Summarize the below content. \n "${content}"`;
      break;
    case "vocab":
      promptValue += `Provide some good vocabulary suggestions for the below content as a list of words with their mapping from existing words in article. \n "${content}"`;
      break;
    case "improve":
      promptValue += `Improve the below content by making it even better. \n "${content}"`;
      break;
    default:
      return content;
  }
  const styledContent = await openAIChatWrapper(promptValue);
  return styledContent;
};

/**
 * Retrieves a tone suggestion from the OpenAI API based on the provided context.
 *
 * This function generates a prompt to change the tone of the provided text to
 * the specified context ('professional', 'funny', or 'casual') and sends it to
 * the OpenAI API using openAIChatWrapper. It then returns the text with the
 * applied tone change.
 *
 * @param {string} content The text for which the tone needs to be changed.
 * @param {string} context The desired tone style ('professional', 'funny', 'casual').
 * @returns {Promise<string>} A promise that resolves to the text with the applied tone change.
 */
export const getToneSuggestion = async (content, context) => {
  const tonePrompt = `Paraphrase below text in ${context} tone. \n "${content}"`;
  const toneContent = await openAIChatWrapper(tonePrompt);
  return toneContent;
};
